apiVersion: v1 # Jobs Default K8 API
kind: Pod # This tells kubernetes what kind of class it is working with
metadata:
  name: stimuli-pipeline #
  labels:
    app: stimuli-pipeline-jupyter # Reference this in your service
spec:
  restartPolicy: Never # Options are OnFailure, and Never.
  hostNetwork: true # This option will allow the pod to use the host network for internet access
  volumes:
  - name: mnt
    hostPath:
      path: /mnt # Directory on the host machine to be mounted
  imagePullSecrets:
  - name: docker-credentials
  containers: # Container Level
  - name: stimuli-pipeline # Container name (Can be set to whatever)
    image: ninai/stimuli # Docker Image hosted on Docker Hub
    ports:
    - containerPort: 8888
    volumeMounts: # Container reference to volumes define above
    - name: mnt # Name of the volume define above
      mountPath: /mnt # Location of where to mount it in the container
    env: # This section refers to secrets created under the user namespace and set them as enviorment variables
    - name: DJ_HOST
      valueFrom:
        secretKeyRef:
          name: datajoint-credentials
          key: DJ_HOST
    - name: DJ_USER
      valueFrom:
        secretKeyRef:
          name: datajoint-credentials
          key: DJ_USER
    - name: DJ_PASS
      valueFrom:
        secretKeyRef:
          name: datajoint-credentials
          key: DJ_PASS
    - name: GITHUB_USERNAME
      valueFrom:
        secretKeyRef:
          name: github-credentials
          key: GITHUB_USERNAME
    - name: GITHUB_PASSWORD
      valueFrom:
        secretKeyRef:
          name: github-credentials
          key: GITHUB_PASSWORD
    command: ["/bin/bash"] # Entry point for the container
    args: ["-c", "pip3 install jupyter \
    && jupyter notebook --ip='*' --port=8888 --allow-root --no-browser --NotebookApp.token=${GITHUB_PASSWORD}"] # sh commands to clone and run python script

---
kind: Service
apiVersion: v1
metadata:
  name: stimuli-pipeline-jupyter-service
spec:
  type: NodePort
  selector:
    app: stimuli-pipeline-jupyter
  ports:
  - protocol: TCP
    nodePort: 30000 # Port might be taken so switch it to something else
    port: 8888
    targetPort: 8888 