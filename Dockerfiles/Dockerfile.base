FROM ubuntu:17.10

LABEL maintainer="Erick Cobos <ecobos@bcm.edu>"

###############################################################################
# Install some optimization libraries (used by many libraries below)
RUN apt-get update && \
    apt-get install -y libopenblas-dev libatlas-base-dev libeigen3-dev && \
    export MKL_NUM_THREADS=1 OPENBLAS_NUM_THREADS=1 OMP_NUM_THREADS=1   
    
###############################################################################
# Install CUDA 9
# Based in dockerfiles from https://gitlab.com/nvidia/cuda/blob/ubuntu17.04/9.0
RUN apt-get update && apt-get install -y --no-install-recommends curl ca-certificates && \
    curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1704/x86_64/7fa2af80.pub | apt-key add - && \
    echo "deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1704/x86_64 /" > /etc/apt/sources.list.d/cuda.list && \
    apt-get purge --autoremove -y curl ca-certificates && \
    rm -rf /var/lib/apt/lists/*

ENV CUDA_VERSION 9.0.176

ENV CUDA_PKG_VERSION 9-0=$CUDA_VERSION-1
RUN apt-get update && apt-get install -y --no-install-recommends \
        cuda-libraries-dev-$CUDA_PKG_VERSION cuda-nvml-dev-$CUDA_PKG_VERSION \
        cuda-minimal-build-$CUDA_PKG_VERSION \
        cuda-command-line-tools-$CUDA_PKG_VERSION && \
    ln -s cuda-9.0 /usr/local/cuda && \
    rm -rf /var/lib/apt/lists/*

# nvidia-docker 1.0
LABEL com.nvidia.volumes.needed="nvidia_driver"
LABEL com.nvidia.cuda.version="${CUDA_VERSION}"

RUN echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf

ENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
ENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64:/usr/local/cuda/extras/CUPTI/lib64
ENV LIBRARY_PATH /usr/local/cuda/lib64/stubs:${LIBRARY_PATH}

# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,utility
ENV NVIDIA_REQUIRE_CUDA "cuda>=9.0"

###############################################################################
# Install Python 3
RUN apt-get update && \
    apt-get install -y python3-dev python3-pip && \ 
    # Install these from pip cause TensorFlow needs numpy > 1.12.1
    pip3 install numpy scipy matplotlib             

###############################################################################
# Install OpenCV 3.4.0 with CUDA support (take a seat, this takes hours)
# With no CUDA support: sudo apt-get install python3-opencv

## Get dependencies
RUN apt-get update && \
    apt-get install -y build-essential cmake git pkg-config libgtk-3-dev \
                       libavcodec-dev libavformat-dev libswscale-dev \
    # To recompile CUDA we need an slightly older compiler (current is gcc 7)
                       gcc-6 g++-6 \
    # Optional dependencies
                       libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev \
                       libxvidcore-dev libx264-dev libhdf5-dev ffmpeg
    # Camera support
#                      libdc1394-22-dev libv4l-devel # camera support

# Install
RUN git clone https://github.com/opencv/opencv && \
    cd opencv && \
    git checkout 3.4.0 && \
    mkdir build && \
    cd build && \ 
    cmake -D CUDA_HOST_COMPILER="/usr/bin/gcc-6" \
          -D CUDA_NVCC_FLAGS="--expt-relaxed-constexpr" .. && \
    make install && \
    cd ../.. && \
    rm -r opencv

###############################################################################
# Instal FFTW (C library) and pyfftw (its python wrapper)
RUN apt-get install wget && \
    wget http://www.fftw.org/fftw-3.3.7.tar.gz && \
    tar -xvzf fftw-3.3.7.tar.gz && \
    cd fftw-3.3.7 && \
    ./configure --enable-threads --with-pic --enable-float --enable-sse --enable-sse2 --enable-avx && \
    make && \
    make install && \
    ./configure --enable-threads --with-pic --enable-sse2 -enable-avx && \
    make && \
    make install && \
    ./configure --enable-threads --with-pic --enable-long-double && \
    make && \
    make install && \
    cd .. && \
    rm fftw-3.3.7.tar.gz && \
    rm -r fftw-3.3.7 && \
    pip3 install pyfftw

###############################################################################
# Install CaImAn
# Install dependencies
RUN apt-get install -y python3-tk && \
    pip3 install future cvxpy scikit-learn scikit-image tensorflow keras \
                 peakutils \
    # Unused but required (imported in code)
                 ipyparallel Cython h5py tqdm psutil

# Install without OASIS
RUN pip3 install git+https://github.com/ecobost/CaImAn.git

# Install with OASIS
#RUN git clone https://github.com/ecobost/CaImAn.git && \
#    cd CaImAn && \
#    python3 setup.py build_ext -i && \
#    python3 setup.py clean --all && \
#    cd .. && \
#    rm -r CaImAn

###############################################################################
# Install spike deconvolution packages
RUN pip3 install git+https://github.com/cajal/PyFNND # oopsie

RUN apt-get install autoconf automake libtool && \
    git clone https://github.com/lucastheis/cmt.git && \
    cd cmt/code/liblbfgs && \
    ./autogen.sh && \
    ./configure --enable-sse2 && \
    make CFLAGS="-fPIC" && \
    cd ../..  && \
    python3 setup.py build && \
    python3 setup.py install && \
    python3 setup.py clean --all && \
    cd .. && \
    rm -r cmt && \
    pip3 install git+https://github.com/cajal/c2s.git # stm (spike-triggered mixture model)

###############################################################################
# Miscelaneous packages

# Required
RUN pip3 install git+https://github.com/datajoint/datajoint-python.git && \
    pip3 install git+https://github.com/atlab/scanreader.git && \
    pip3 install seaborn slacker imreg_dft pandas imageio

# Optional
RUN pip3 install nano nose2

ENTRYPOINT ["/bin/bash"]
